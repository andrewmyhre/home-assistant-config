- alias: Close the blinds when I get home
  trigger:
  - platform: state
    entity_id: person.andrew
    from: not_home
    to: home
  condition:
  - condition: state
    entity_id: sun.sun
    state: below_horizon
  action:
  - service: cover.close_cover
    entity_id: cover.blinds
- alias: Lights up (pre-sunset)
  trigger:
  - platform: time_pattern
    minutes: /1
  condition:
  - condition: state
    entity_id: person.andrew
    state: home
  - condition: state
    entity_id: switch.asleep
    state: "off"
  - condition: sun
    after: sunset
    after_offset: "-01:00:00"
  - condition: numeric_state
    entity_id: sun.sun
    value_template: "{{ state_attr('sun.sun', 'elevation') }}"
    below: 10
    above: 0
  action:
  - service: light.turn_on
    entity_id: light.main_lights
    data_template:
      brightness: > 
        {{ [(((10 - state_attr('sun.sun', 'elevation')) / 10) * 200)|int(0),state_attr('light.main_lights','brightness')]|max}}
      rgb_color:
      - 255
      - 255
      - 255
- alias: Lights down (post-sunset)
  trigger:
  - platform: time_pattern
    minutes: /1
  condition:
  - condition: state
    entity_id: person.andrew
    state: home
  - condition: state
    entity_id: switch.asleep
    state: "off"
  - condition: sun
    after: sunset
  - condition: numeric_state
    entity_id: sun.sun
    value_template: "{{ state_attr('sun.sun', 'elevation') }}"
    below: -5
    above: -15
  action:
  - service: light.turn_on
    entity_id: light.main_lights
    data_template:
      brightness: > 
        {{ 100 + (((15 + state_attr('sun.sun', 'elevation')) / 10) * 100)|int(0) }}
- alias: Lights down (pre-bedtime)
  trigger:
  - platform: time_pattern
    minutes: /5
  condition:
  - condition: state
    entity_id: person.andrew
    state: home
  - condition: state
    entity_id: switch.asleep
    state: "off"
  - condition: state
    entity_id: switch.bedtime
    state: "on"
  - condition: numeric_state
    entity_id: light.main_lights
    value_template: "{{state_attr('light.main_lights', 'brightness')}}"
    above: 20
  action:
  - service: light.turn_on
    entity_id: light.main_lights
    data_template:
      brightness:
        "{{(state_attr('light.main_lights', 'brightness') - 5)|int(0)}}"
      rgb_color:
      - "{{(state_attr('light.main_lights', 'rgb_color')[0])|int(0) }}"
      - "{{(state_attr('light.main_lights', 'rgb_color')[1]-5)|int(0) }}"
      - "{{(state_attr('light.main_lights', 'rgb_color')[2]-5)|int(0) }}"
- alias: Recognise when it's bedtime
  trigger:
  - platform: event
    event_type: ifttt_webhook_received
    event_data:
      action: time_for_bed
  action:
  - service: switch.turn_on
    data:
      entity_id: switch.bedtime
- alias: Lights up (pre-sunrise)
  trigger:
  - platform: time_pattern
    minutes: /1
  condition:
  - condition: state
    entity_id: switch.asleep
    state: "off"
  - condition: state
    entity_id: switch.bedtime
    state: "off"
  - condition: state
    entity_id: person.andrew
    state: home
  - condition: sun
    after: sunrise
  - condition: numeric_state
    entity_id: sun.sun
    value_template: "{{ state_attr('sun.sun', 'elevation') }}"
    below: 30
    above: 10
  action:
  - service: light.turn_on
    entity_id: light.main_lights
    data_template:
      brightness: > 
        {{ [(((state_attr('sun.sun', 'elevation')-10) / 20) * 120)|int(0),state_attr('light.main_lights','brightness')]|max}}
      rgb_color:
      - "{{state_attr('light.main_lights', 'rgb_color')[0]*(((state_attr('sun.sun', 'elevation')-10) / 20) * 230)|int(0) }}"
      - "{{state_attr('light.main_lights', 'rgb_color')[1]*(((state_attr('sun.sun', 'elevation')-10) / 20) * 210)|int(0) }}"
      - "{{state_attr('light.main_lights', 'rgb_color')[2]*(((state_attr('sun.sun', 'elevation')-10) / 20) * 210)|int(0) }}"
- alias: Send roomba home when Andrew comes home
  trigger:
  - platform: state
    entity_id: person.andrew
    from: not_home
    to: home
  condition:
  - condition: state
    entity_id: vacuum.roomba
    state: 'on'
  action:
  - service: vacuum.return_to_base
    entity_id: vacuum.roomba
- alias: Close the blinds when the sun has set
  trigger:
  - platform: sun
    event: sunset
    offset: 00:00:00
  action:
  - service: cover.close_cover
    entity_id: cover.left_blind
  - service: cover.close_cover
    data:
      entity_id: cover.left_blind
  - service: cover.set_cover_position
    data:
      entity_id: cover.right_blind
      position: 35
- alias: Andrew goes to sleep
  trigger:
  - platform: event
    event_type: ifttt_webhook_received
    event_data:
      action: 'goodnight'
  condition:
  - condition: state
    entity_id: person.andrew
    state: home
  action:
  - service: switch.turn_on
    data:
      entity_id: switch.asleep
  - service: switch.turn_off
    data:
      entity_id: switch.bedtime
  - service: light.turn_off
    data:
      entity_id: light.bedroom
  - service: light.turn_off
    data:
      entity_id: light.lounge
  - service: light.turn_off
    data:
      entity_id: light.kitchen
  - service: light.turn_off
    data:
      entity_id: light.spot
  - service: light.turn_on
    data:
      entity_id: light.bathroom
      brightness: 1
      rgb_color:
      - 255
      - 255
      - 0
  - service: light.turn_on
    data:
      entity_id: light.lounge_lamp
      brightness: 1
      rgb_color:
      - 100
      - 20
      - 0
  - service: input_select.select_option
    data:
      entity_id: input_select.ac_mode
      option: "Cool"
  - service: input_select.select_option
    data:
      entity_id: input_select.ac_fan
      option: "Low"
  - service: input_number.set_value
    data:
      entity_id: input_number.ac_temp
      value: 78
- alias: Andrew wakes up
  trigger:
  - platform: event
    event_type: ifttt_webhook_received
    event_data:
      action: goodmorning
  condition:
  - condition: and
    conditions:
    - condition: state
      entity_id: person.andrew
      state: home
    - condition: time
      after: '6:00'
      before: '23:00'
  action:
  - service: switch.turn_off
    data:
      entity_id: switch.asleep
  - service: switch.turn_off
    data:
      entity_id: switch.bedtime
  - service: cover.set_cover_position
    entity_id: cover.left_blind
    data:
      position: 20
  - service: cover.set_cover_position
    entity_id: cover.right_blind
    data:
      position: 40
  - service: light.turn_on
    entity_id: light.kitchen
    data:
      brightness: 180
      color_temp: 400
  - service: light.turn_on
    entity_id: light.lounge
    data:
      brightness: 180
      color_temp: 400
  - service: light.turn_on
    entity_id: light.bathroom
    data:
      brightness: 100
      color_temp: 400
- alias: Andrew leaves home
  trigger:
  - platform: state
    entity_id: person.andrew
    from: home
    to: not_home
  action:
  - service: light.turn_off
    entity_id: light.all_lights
  - service: ifttt.trigger
    data:
      event: light_living_room_off
  - service: switch.turn_off
    entity_id: switch.auto_ac
  - service: switch.turn_off
    entity_id: switch.ac
  - service: input_select.select_option
    data:
      entity_id: input_select.ac_mode
      option: "Off"
- alias: Open the blinds when I leave home
  trigger:
  - platform: state
    entity_id: person.andrew
    from: home
    to: not_home
  action:
  - service: cover.open_cover
    entity_id: cover.blinds
- alias: Rainy Day
  trigger:
  - platform: state
    entity_id: sensor.precip_intensity
    to: rain
  condition:
  - condition: or
    conditions:
    - condition: state
      entity_id: person.andrew
      state: home
  - condition: time
    after: '14:00'
    before: '23:00'
  action:
  - service: homeassistant.turn_on
    entity_id: scene.evening
  - service: notify.slack
    data:
      message: It's raining so I turned the lights on
- alias: Dark Morning
  trigger:
  - platform: numeric_state
    entity_id: sensor.dark_sky_cloud_coverage_0
    above: 70
  condition:
  - condition: or
    conditions:
    - condition: state
      entity_id: person.andrew
      state: home
  - condition: state
    entity_id: sun.sun
    state: above_horizon
  action:
  - service: homeassistant.turn_on
    entity_id: scene.evening
  - service: notify.slack
    data:
      message: It's dark so I turned the lights on
- alias: Begin vacuuming
  trigger:
  - platform: time
    at: '11:00:00'
  condition:
  - condition: state
    entity_id: person.andrew
    state: not_home
  action:
  - service: vacuum.turn_on
    entity_id: vacuum.roomba
  - service: notify.slack
    data:
      message: I started the Roomba on a cleaning cycle
- alias: Select theme
  id: hass_theme
  initial_state: 'on'
  trigger:
  - platform: state
    entity_id: input_select.hass_theme
  action:
  - service: frontend.set_theme
    data_template:
      name: '{{ states.input_select.hass_theme.state }}'
- alias: automate_ifttt
  trigger:
    - platform: event
      event_type: ifttt_webhook_received
      event_data:
        action: 'call_service'
  action:
    - service_template: '{{ trigger.event.data.service }}'
      data_template:
        entity_id: '{{ trigger.event.data.entity_id }}'
- alias: Andrew arrives home
  id: arrive_home
  trigger:
  - platform: state
    entity_id: person.andrew
    from: not_home
    to: home
  condition:
  - condition: state
    entity_id: person.andrew
    state: home
  action:
  - service: light.turn_on
    entity_id: light.bathroom
  - service: light.turn_on
    entity_id: light.kitchen
  - service: light.turn_on
    entity_id: light.lounge
  - service: switch.turn_on
    entity_id: switch.auto_ac
- alias: Smoke
  id: smoke
  trigger:
  - platform: event
    event_type: ifttt_webhook_received
    event_data:
      action: smoke
  action:
  - service: cover.set_cover_position
    entity_id: cover.left_blind
    data:
      position: 70
- alias: Movie time
  id: movie_time
  trigger:
  - platform: event
    event_type: ifttt_webhook_received
    event_data:
      action: movie_time
  action:
  - service: light.turn_on
    entity_id: light.kitchen
    data:
      brightness: 60
  - service: light.turn_on
    entity_id: light.bedroom
    data:
      brightness: 50
  - service: light.turn_on
    entity_id: light.lounge
    data:
      brightness: 30
  - service: light.turn_on
    entity_id: light.lounge_lamp
    data:
      brightness: "{{ [state_attr('light.lounge_lamp','brightness'),20]|min}}"
  - service: light.turn_off
    entity_id: light.spot
- alias: Set AC
  id: set_ac
  trigger:
    platform: state
    entity_id: sensor.ac_setting
  action:
    service: remote.send_command
    data_template:
      entity_id: remote.broadlink
      device: "AC"
      command: "{{ states.sensor.ac_setting.state}}"
- alias: AC Off
  id: set_ac_off
  trigger:
  - platform: state
    entity_id: person.andrew
    from: not_home
    to: home
  action:
  - service: input_select.select_option
    data:
      entity_id: input_select.ac_mode
      option: "Off"
- alias: AC Fan
  id: set_ac_mode_fan
  trigger:
  - platform: state
    entity_id: person.andrew
    from: not_home
    to: home
  action:
  - service: input_select.select_option
    data:
      entity_id: input_select.ac_mode
      option: "Fan"
- alias: AC Cool
  id: set_ac_mode_cool
  trigger:
  - platform: state
    entity_id: person.andrew
    from: not_home
    to: home
  action:
  - service: input_select.select_option
    data:
      entity_id: input_select.ac_mode
      option: "Cool"
- alias: AC Eco
  id: set_ac_mode_eco
  trigger:
  - platform: state
    entity_id: person.andrew
    from: not_home
    to: home
  action:
  - service: input_select.select_option
    data:
      entity_id: input_select.ac_mode
      option: "Eco"
- alias: AC Low
  id: set_ac_fan_low
  trigger:
  - platform: state
    entity_id: person.andrew
    from: not_home
    to: home
  action:
  - service: input_select.select_option
    data:
      entity_id: input_select.ac_fan
      option: "Low"
- alias: AC Medium
  id: set_ac_fan_medium
  trigger:
  - platform: state
    entity_id: person.andrew
    from: not_home
    to: home
  action:
  - service: input_select.select_option
    data:
      entity_id: input_select.ac_fan
      option: "Medium"
- alias: AC High
  id: set_ac_fan_high
  trigger:
  - platform: state
    entity_id: person.andrew
    from: not_home
    to: home
  action:
  - service: input_select.select_option
    data:
      entity_id: input_select.ac_fan
      option: "High"
- alias: AC Auto
  id: set_ac_fan_auto
  trigger:
  - platform: state
    entity_id: person.andrew
    from: not_home
    to: home
  action:
  - service: input_select.select_option
    data:
      entity_id: input_select.ac_fan
      option: "Auto"
- alias: Tv On
  id: turn_tv_on
  trigger:
  - platform: state
    entity_id: person.andrew
    from: not_home
    to: home
  action:
  - service: remote.send_command
    data:
      entity_id: remote.broadlink
      device: "TV"
      command: "On"
- alias: Tv Off
  id: turn_tv_off
  trigger:
  - platform: state
    entity_id: person.andrew
    from: not_home
    to: home
  action:
  - service: remote.send_command
    data:
      entity_id: remote.broadlink
      device: "TV"
      command: "Off"
- alias: Keep the right blind above the AC when it's on
  trigger:
  - platform: template
    value_template: "{% if state_attr('cover.right_blind', 'current_position') < 35 %}true{%endif%}"
  - platform: state
    entity_id: sensor.ac_mode
    from: "Off"
  condition:
    condition: and
    conditions:
    - condition: template
      value_template: "{% if state_attr('cover.right_blind', 'current_position') < 35 %}true{%endif%}"
    - condition: not
      conditions:
      - condition: state
        entity_id: sensor.ac_mode
        state: "Off"
  action:
  - service: cover.set_cover_position
    entity_id: cover.right_blind
    data:
      position: 35
- alias: AC Turn On When Recommended
  id: set_ac_recommended_turn_on
  condition:
  - condition: state
    entity_id: person.andrew
    state: home
  - condition: state
    entity_id: sensor.ac_mode
    state: "Off"
  - condition: or
    conditions:
    - condition: state
      entity_id: switch.asleep
      state: "on"
    - condition: state
      entity_id: switch.auto_ac
      state: "on"
  trigger:
  - platform: template
    value_template: "{{ states('sensor.recommend_ac') }}"
  - platform: state
    entity_id: sensor.recommend_ac_temp
    from: "false"
    to: "true"
  - platform: state
    entity_id: switch.asleep
    from: "off"
    to: "on"
  - platform: state
    entity_id: switch.auto_ac
    from: "off"
    to: "on"
  action:
  - service: input_number.set_value
    data_template:
      entity_id: input_number.ac_temp
      value: "{{states('sensor.recommend_ac_temp')}}"
  - service: input_select.select_option
    data_template:
      entity_id: input_select.ac_fan
      option: "{%if states('input_select.ac_mode')=='Off'%}Low{%else%}{{states('input_select.ac_fan')}}{%endif%}"
  - service: input_select.select_option
    data:
      entity_id: input_select.ac_mode
      option: "Cool"
- alias: AC Turn Off When Recommended
  id: set_ac_recommended_turn_off
  condition:
  - condition: state
    entity_id: person.andrew
    state: home
  - condition: not
    conditions:
    - condition: state
      entity_id: input_select.ac_mode
      state: "Off"
  - condition: or
    conditions:
    - condition: state
      entity_id: switch.asleep
      state: "on"
    - condition: state
      entity_id: switch.auto_ac
      state: "on"
  trigger:
  - platform: state
    entity_id: sensor.recommend_ac
    from: "true"
    to: "false"
  - platform: state
    entity_id: sensor.recommend_ac_temp
  - platform: state
    entity_id: switch.asleep
    from: "off"
    to: "on"
  - platform: state
    entity_id: switch.auto_ac
    from: "off"
    to: "on"
  action:
  - service: input_select.select_option
    data:
      entity_id: input_select.ac_mode
      option: "Off"
